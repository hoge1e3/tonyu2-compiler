native $;
native location;
native process;
native require;
"field strict";

//                                            4   5     6  7    8    9  10   11             12   13
// node index.js test\fixture\oserosen_b\ -r  jr  mcts 100 2  cmcts 1000 2  1234  replayFile.txt 10
if (process.argv[1]=="--expose-gc") process.argv.shift();
let mapType=process.argv[4];
var player1 = {name:process.argv[5],iteration:process.argv[6],timeout:process.argv[7]};
var player2 = {name:process.argv[8],iteration:process.argv[9],timeout:process.argv[10]};
let matchCount=process.argv[11];
if(!matchCount){
    throw new Error("ゲーム実行回数が入力されていません！");
}
matchCount= Number(matchCount);
print(player1);
print(player2);
$folderName1 = player1;//フォルダ生成用
$folderName2 = player2;//フォルダ生成用
$loopCount=1;
$free=!!mapType.match(/f/);
$gameConfig={
    debug=$free,
    player = 2,
    players = [1,2],
    replay = {file=process.argv[12], turn=process.argv[13]-0},
};
$kintetsu=!!mapType.match(/^k/);
$metro=!!mapType.match(/^m/);
$main=this;

var searching;

if($kintetsu){
    new KLines;
    update();
    new DeleteStation;
    update();
}else if($metro){
    new MLines;
    update();
    new DeleteStation;
    update();

}else{
    new Lines;//路線と駅のデータ
    update();
    new DeleteStation;
    update();
}
$validStationNames=[];
for (let staKey of Object.keys($stations)) {
    if (staKey.match(/point/)) continue;
    $validStationNames.push(staKey);
}
$gameConfig.validStationNames=$validStationNames;
new StationPlace;//各駅の座標のデータ
update();
//new MapScroll{x:0,y:0,scale:1};
var diceArray=[];
if($kintetsu){
    diceArray=[2,2,2,2,3,3,3,4,4,4,5,5];
}else if($metro){
    diceArray=[2,2,2,2,3,3,3,3,3,4,4,5];//ダイスの出目用の配列
}else{
    diceArray=[2,2,2,2,2,2,3,3,3,4,4,5];//ダイスの出目用の配列
}


$boardPrepared = false;//全ての駅のボタンとノードの配置が完了したらtrue
var ready = true;//探索中はfalse
$searchPrepared = true;//検索ボタンが押されたらfalse
$hotSpring = false;//温泉駅が選択されたらtrue




$name2Button={};


var sta;
for(var i=0;i<$stationPlace.length;i++){//駅名を表示する
    sta = new SButton{left:$stationPlace[i].x,top:$stationPlace[i].y,width:40,height:30,text:$stationPlace[i].name.replace(/\(.*/,""),stext:$stationPlace[i].name,
    fillStyle:"white",layer=$mainLayer};
    
    $name2Button[$stationPlace[i].name]=sta;
    
}

$Boot.newLimit=null;
update();
$name2Node={};
var stationPlace;
var nts=[];
for (stationPlace of $stationPlace) {
    $name2Node[stationPlace.name]=new Node{name:stationPlace.name, x:stationPlace.x, y:stationPlace.y, owner:0};
    nts.push(stationPlace.name);
}
update();

for(var stations,z in $stations){//,zはTonyuの仕様の関係で何か渡さなければいけない為
    if(stations.indexOf("point") > -1){
        $name2Node[stations]=new Node{name:stations,x:0,y:0};
    }
}

\botParameter(player){
    var bot;
    if(player.name == "mcts"){
        bot = new MCTSBot{value,Cp:10, expandThresh:3, iteration:Number(player.iteration), timeout:Number(player.timeout)};
    } else if(player.name == "omcts"){
        bot = new OptimizedMCTSBot{value, searchDist:2, Cp:10, expandThresh:2, iteration:Number(player.iteration), timeout:Number(player.timeout)};
    }else if(player.name == "cmcts"){
        bot = new CornerMCTSBot{value,Cp:10, expandThresh:3, iteration:Number(player.iteration), timeout:Number(player.timeout)};
    }else if(player.name == "crmcts"){
        bot = new CornerRandomMCTSBot{value,Cp:10, expandThresh:3, iteration:Number(player.iteration), timeout:Number(player.timeout)};
    }else{
        throw new Error("bot:",bot);
    }
    return bot;
}

\value(ctx, p, s:Board):Number {
    return s.value(ctx,p);
}


$boardPrepared = true;//全ての駅のボタンとNodeの配置完了
print("Game Start (Auto)", $Boot.newLimit);

$Boot.newLimit=null;//10000000;

$gameConfig.bots={"1":botParameter(player1), "2":botParameter(player2)};
var stnames=Object.keys($name2Node);
var allStations=$stationPlace.length;

var kouho=[];
var stname;


if($gameConfig.replay.file){//リプレイtrueの時
    //let logger=new Logger;
    update();
    var board = new Board{turn: 1, turnCount:1, ready: true/*,diceNum:dice()*/,owner:{}, gameConfig: $gameConfig};
    let replay = new Replay{state: board, context:$gameConfig, logFile: $gameConfig.replay.file };
    let replayedAll;
    for (let i=0;i<$gameConfig.replay.turn;i++) {
        if (!replay.step()) {
            replayedAll=true;
            break;
        }
    }
    if (replayedAll) {
        let logger=new Logger{logFile: $gameConfig.replay.file};
        var g=new GameMaster{state: replay.state, context:$gameConfig, logger};
        oneMatch(g);
    } else {
        let bot=$gameConfig.bots[replay.state.player];
        replay.dump(bot);
    }
    return;
}else{
    while ($loopCount && $loopCount<matchCount) {
        print("Game Start!");
        var board = new Board{turn: 1, turnCount:1, ready: true/*,diceNum:dice()*/,owner:$iniOwner, gameConfig: $gameConfig};
        print(board.owner);
        let logger=new Logger;
        var g=new GameMaster{state: board, context:$gameConfig, logger};
        oneMatch(g);
        $loopCount++;
    }
}

\hashDiff(before,after) {
    let res={};
    for (let k,_ of after) {
        if (before[k]!==after[k]) res[k]=`${before[k]}->${after[k]}`;
    }
    return res;
}

\oneMatch(g:GameMaster) {
    let rests={};
    while(!g.gameover()) {
        var pp=g.state.player;
        var a=g.step();
        print(pp, /*g.state.diceNum,*/ a.stext || a.num,  g.state.value($gameConfig, 1), g.state.value($gameConfig, 2));
        let dif=hashDiff(rests, g.state.lineRest());
        print(dif);
        print(g.state.status());
        if (g.logger) {
            if (Object.keys(dif).length) g.logger.add($JSON.stringify(dif));
            g.logger.add(g.state.status());
        }
        rests=g.state.lineRest();
        //print(players.map\(p) {return value(context, p, g.state);}.join(" "));
        update();
    }

    print("This game is finished!"+"\nFirstPlayer's station:"+g.state.value($gameConfig, 1));
    if (g.logger) {
        g.logger.add(`Result: ${g.state.value($gameConfig, 1)} ${g.state.value($gameConfig, 2)}`);
    }
    $firstPlayer=false;
    if(takenCount(1) > $stationPlace.length/2){
        $firstPlayer=true;
        //new CreateFile{taken:g.state.value($gameConfig, 1)};
    }
}

\takenCount(turn){
    var taken=0;
    var sn;
    for(sn of board.owner){
        if(board.owner[sn].owner==turn){
            taken++;
        }
    }
    return taken;
}

\searchCorner(stationArray){//取られていない角の駅の配列を受け取る
    var biggest=stationArray[0];
    for(var i=1;i<stationArray.length;i++){
        if($stations[biggest].nexts.length < $stations[stationArray[i]].nexts.length){
        /*隣接駅数が多ければそちらを最大の角とする*/
            biggest=stationArray[i];
        }
    }
    return biggest;
}



\colorCount() {
    // dummy
}
\dice(){
    // dummy(debug mode)
    return rnd(4)+2;
}