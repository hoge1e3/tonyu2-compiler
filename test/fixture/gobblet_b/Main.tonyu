native process;
"field strict";

//                                              4    5   6  7     8    9  10    11             12
// node index.js test\fixture\gobblet_b\   -r mcts 100 2  mcts  1000 2  1234  replayFile.txt 10
if(!process.argv[10]){
    throw new Error("ゲーム実行回数が入力されていません！");
}
var player1 = {name:process.argv[4],iteration:process.argv[5],timeout:process.argv[6]};
var player2 = {name:process.argv[7],iteration:process.argv[8],timeout:process.argv[9]};
print(player1);
print(player2);
\botParameter(player){
    var bot;
    if(player.name == "mcts"){
        bot = new MCTSBot{value,Cp:10, expandThresh:3, iteration:Number(player.iteration), timeout:Number(player.timeout)};
    }else if(player.name == "cmcts"){
        //bot = new CornerMCTSBot{value,Cp:10, expandThresh:3, iteration:Number(player.iteration), timeout:Number(player.timeout)};
    }else{
        throw new Error("bot:",bot);
    }
    return bot;
}
let bots=[0, botParameter(player1), botParameter(player2)];

\value(ctx:Context, player: Number, state:Board) {
    /*let acts=state.actionsEvents(ctx);
    if (acts.length===0) {
        if (player===state.player) return 0;
        else return 1;
    }*/
    let win=state.gameover(ctx);
    if (!win || win===true ) {
        return 0.5;
    } else if (player===win) {
        return 1;
    } else {
        return 0;
    }
    
}


let replayFile=process.argv[11];
if(replayFile){//リプレイtrueの時
    update();
    for (let mt=0;mt<process.argv[10]-0 ;mt++) {
        let context=new Context{players:[1,2], bots};
        let state=initialState(context);
        let replay = new Replay{state, context, logFile: replayFile };
        let turn=process.argv[12];
        print(replay.state+"");
        for (let i=0;i<turn;i++) {
            replay.step();
            print(replay.state+"");
        }
        let bot=bots[replay.state.player];
        let sns=replay.play1(bot);//,context,replay.state, replay.state.player);
        //for (let i=0;i<)
        match(context, replay.state, replay);
    }
} else {
    for (let i=0;i<process.argv[10]-0 ;i++) {
        let context=new Context{players:[1,2], bots};
        let state=initialState(context);
        match(context, state);   
    }
}
\dump(bot,context,state,player) {
    bot.play(context, state);
    print (state+"");
    let lastNode=bot.lastRootNode;
    let lastActions=bot.lastActions;
    if (lastNode && lastActions) {
        let sns=[];
        for (let a=0;a<lastNode.subnodes.length;a++) {
            let qc=bot.q(lastNode,a);
            let ns=state.next(context, lastActions[a]);
            let sn=lastNode.subnodes[a];
            //sn.push{action:lastActions[a],qc, q:sn.q+"", n:sn.n};
            sns.push{action:lastActions[a],qc, q:sn.q+"", n:sn.n, ns:ns+" gov="+ns.gameover(),
            value: value(context, player, ns)};
        }
        sns.sort \(a,b) {
            return b.qc-a.qc;
        };
        print(sns);
    }
}
\initialState(context) {
    let mat=new Matrix;
    let r=3;
    for (let i=0;i<r;i++) {
        for (let j=0;j<r;j++) {
            mat.set(j,i,[]);
        }
    }
    let player=1;
    let state=new Board{
        mat,player,having:[1,1,2,2,3,3,4,4,5,5,6,6],cnt:0,
        lastPut:[0,0,0]
    };
    return state;
}
\match(context,state,replay) {    
    let logger=new Logger{replay};
    let g=new GameMaster{context, state, logger};
    print(g.state+"");
    let winner=0;
    while (!(winner=g.gameover())) {
        let a=g.step();
        print(a.x, a.y);
        print(g.state+"");
        print(value(context, g.state.player, g.state ));
        
        updateEx(1);
    }
    print("winner is ",winner);
    logger.add("Winner: "+winner);
    //updateEx(60);
    
}
