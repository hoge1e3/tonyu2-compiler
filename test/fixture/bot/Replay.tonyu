
let logFle;
let state: State;
let context: Context;
let lines: String[];
let linesRead: String[];
let actCnt:Number;
\clone() {
    return new Replay{doClone:this};
}
\new(params) {
    if (params.doClone) {
        let p=params.doClone;
        logFile=p.logFile;
        state=p.state;
        context=p.context;
        lines=p.lines;
        linesRead=p.linesRead.slice();
        actCnt=p.actCnt;
        return;
    }
    super(params);
    logFile=file(logFile);
    lines=logFile.lines();
    linesRead=[];
    actCnt=1;
}
\step():Boolean {
    let pat=/Action:(.*)/;
    while (true) {
        let r=lines.shift();
        linesRead.push(r);
        if (!r) return false;
        let m=pat.exec(r);
        if (!m) continue;
        actCnt++;
        let a=$JSON.parse(m[1]);
        state=state.next(context, a);
        return true;
    }
}
\actionModified(a:Action) {
    let res=clone();
    res.state=res.state.next(context,a);
    res.linesRead.push(`INSERTED [${res.actCnt}]Action: ${$JSON.stringify(a)}`);
    res.actCnt++;
    return res;
}

\dump(bot) {
    print(play1(bot));
}
\play1(bot){
    bot.play(context, state);
    let lastNode=bot.lastRootNode;
    let lastActions=bot.lastActions;
    if (lastNode && lastActions) {
        let sns=[];
        for (let a=0;a<lastNode.subnodes.length;a++) {
            let qc=bot.q(lastNode,a);
            let sn=lastNode.subnodes[a];
            sns.push{action:lastActions[a],qc};//, q:sn.q+"", n:sn.n};
        }
        sns.sort \(a,b) {
            return b.qc-a.qc;
        };
        return sns;
        //print(sns);
    }
    return null;
}