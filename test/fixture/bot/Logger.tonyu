native process;
let logFile;
let actCnt;
\new(params) {
    super(params);
    actCnt=1;
    let argvs=[...process.argv];
    argvs.shift();
    argvs.shift();
    argvs.shift();
    argvs.shift();
    logFile=logFile|| ( formatDate(new Date())+argvs.join("_") ).replace(/[\s\/\\\:\?\*\<\>\|]/g,"_")+".txt";
    print("logFileName",logFile);
    logFile=file(logFile);
}
\formatDate(d) {
    let p=\(n){return ((10000+n)+"").substring(3,5);}; 
    return (1900+d.getYear())+"/"+ p(d.getMonth()+1) +"/"+p(d.getDate())+" "+
    p(d.getHours())+":"+p(d.getMinutes())+":"+p(d.getSeconds());
}
\add(line) {
    logFile.appendText(formatDate(new Date())+": "+line+"\n");
}
\action(act) {
    act=$JSON.stringify(act);
    add(`[${actCnt}]Action: ${act}`);
    actCnt++;
}
\botStatus(bot) {
    add(`Bot: ITER=${bot.iterated} EXP=${bot.expcount} T/O=${bot.timeoutCount}`);
    let lastNode=bot.lastRootNode;
    let lastActions=bot.lastActions;
    if (lastNode && lastActions) {
        let sn=[];
        for (let a=0;a<lastNode.subnodes.length;a++) {
            let qc=bot.q(lastNode,a);
            sn.push{action:lastActions[a],qc};
        }
        sn.sort \(a,b) {
            return b.qc-a.qc;
        };
        if (sn.length==0) return;
        let qnmax=sn[0].qc;
        let qns=sn.map\(e) {
            return floor(e.qc*100/qnmax);
        };
        add("Qn: Max="+qnmax+" "+$JSON.stringify(qns));
    }
}
\argv() {
    add("argv: "+process.argv.join(" "));
}