native process;
let logFile;
let actCnt;
let replay;
\new(params) {
    super(params);
    actCnt=1;
    let argvs=[...process.argv];
    argvs.shift();
    argvs.shift();
    argvs.shift();
    argvs.shift();
    let prefix=params.prefix+"";
    if (!logFile && replay) {
        logFile=replSpecial(prefix+formatDate(new Date())+"_cont_"+replay+".txt" );
    }
    if (!logFile && params.bots) {
        logFile=replSpecial(prefix+formatDate(new Date())+"_"+params.bots[1]+"_vs_"+params.bots[2] )+".txt";
    }
    logFile=logFile|| replSpecial( prefix+formatDate(new Date())+argvs.join("_") )+".txt";
    print("logFileName",logFile);
    logFile=file(logFile);
    if (logFile.exists()) {
        let lp=/\[(\d+)\]Action:/;
        for (let line of logFile.lines()) {
            let m=lp.exec(line);
            if (m) {
                actCnt=m[1]-(-1);
            }
        }
        print("actCnt resumed :",actCnt);
    } else if (replay && replay.linesRead && replay.actCnt) {
        actCnt=replay.actCnt;
        logFile.text("Continue From:  "+replay.logFile.path()+"\n"+
        replay.linesRead.join("\n")+"\n");
        add("Restart");
    }
}
\replSpecial(f) {
    return f.replace(/[\s\/\\\:\?\*\<\>\|]/g,"_");
}
\formatDate(d) {
    if (!d) d=new Date();
    let p=\(n){return ((10000+n)+"").substring(3,5);}; 
    return (1900+d.getYear())+"/"+ p(d.getMonth()+1) +"/"+p(d.getDate())+" "+
    p(d.getHours())+":"+p(d.getMinutes())+":"+p(d.getSeconds());
}
\add(line) {
    logFile.appendText(formatDate(new Date())+": "+line+"\n");
}
\action(act) {
    act=$JSON.stringify(act);
    add(`[${actCnt}]Action: ${act}`);
    actCnt++;
}
\botStatus(bot) {
    add(`Bot: ITER=${bot.iterated} EXP=${bot.expcount} T/O=${bot.timeoutCount}`);
    let lastNode=bot.lastRootNode;
    let lastActions=bot.lastActions;
    if (lastNode && lastActions) {
        let sn=[];
        for (let a=0;a<lastNode.subnodes.length;a++) {
            let qc=bot.q(lastNode,a);
            sn.push{action:lastActions[a],qc};
        }
        sn.sort \(a,b) {
            return b.qc-a.qc;
        };
        if (sn.length==0) return;
        let qnmax=sn[0].qc;
        let nz=sn.filter\(e){return e.qc>0;};
        let qnmin=nz.length && nz[nz.length-1].qc;
        let qns=sn.map\(e) {
            return floor(e.qc*1000)/1000;
        };
        for (let i=qns.length-1;i>0;i--) {
            let pi=i;
            i--;
            for (;i>=0;i--) {
                if (qns[i]!=qns[pi]) break;
            }
            let len=pi-i;
            i++;
            if (len>1) {
                qns.splice(i,len,qns[i]+"*"+len);
            }
        }
        add("Qn: Max="+qnmax+" Min="+qnmin+" "+$JSON.stringify(qns));
    }
}
\argv() {
    add("argv: "+process.argv.join(" "));
}