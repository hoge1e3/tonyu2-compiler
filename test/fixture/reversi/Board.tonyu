extends State;

let mat:Matrix; // List of 0 あき(なし) 1 白　2 黒   
let player:Number;
let changed:Boolean;
let foePassed:Boolean;
//let cnt:Number;//ターン
\next(ctx:Context, a):State {
    //a:Action
    let nm=cloneMat();
    let foe=3-player;
    if (a.pass) {
        return new Board{mat:nm, player:foe, foePassed:true};
    }
    nm.set(a.x, a.y, player);
    let changed=false;
    let vs=[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]];
    for (let v of vs) {
        let dx=v[0],dy=v[1];
        if (!dx && !dy) throw new Error(" dx dy "+dx+","+dy);
        let x=a.x+dx, y=a.y+dy;
        if (typeof x!=="number" || typeof y!=="number")throw new Error(" x y "+x+","+y);
        let c=0;
        while(true) {
            //c++;
            //if (c>100) throw new Error(c);
            if (x<0||x>=8||y<0||y>=8) break;
            let g=nm.get(x,y);
            /*if (c>90) {
                print(player, foe, g,x,y,dx,dy);
            } */ 
            if (g==0) {
                break;
            }else if (g==player) {
                x-=dx;
                y-=dy;    
                while(x!=a.x || y!=a.y) {
                    if (x<0||x>=8||x<0||y>=8) throw new Error("g!?="+x+","+y);
                    nm.set(x,y,player);
                    x-=dx;
                    y-=dy;    
                    changed=true;
                }
                break;
            }else if (g==foe) {
                x+=dx;
                y+=dy;    
            } else {
                throw new Error("g!?="+g);
            }
        }        
    }
    return new Board{mat:nm, player:foe, changed, foePassed:false};
}
\cloneMat() {
    let nm=mat.clone();
    /*for (let x,y,p in nm) {
        nm.set(x,y,p.slice());
    }*/
    return nm;
}

\actionsEvents(ctx:Context) {
    //: Action[] | Event[] 
    // Action:プレイヤーがとる行動
    // Event :ランダムに起きる事象（サイコロなど）
    // Eventオブジェクトにはフィールドprob(確率を表す0..1の数値)を含め，
    // Event配列のprobの合計値が1になるようにしてください
    // ActionとEventを混ぜて返すことはできません．
    // 常に同じ順序で同じものを返してください
    let res=[];
    for (let y=0;y<8;y++) {
        for (let x=0;x<8;x++) {
            if (mat.get(x,y)!=0) continue;
            res.push{x,y};
        }
    }
    if (!ctx.free) {
        res=res.filter \(a) {
            return next(ctx,a).changed;
        };
        if (res.length==0 && !foePassed) {
            res.push{pass:true};
        }
    }
    return res;
}
\gameover(ctx:Context) {
    if (actionsEvents(ctx).length==0) {
        let c1=0,c2=0;
        for (let x,y,p of mat) {
            if (p==1) c1++;
            if (p==2) c2++;
        }
        if (c1>c2) return 1;
        if (c2>c1) return 2;
        return true;
    }
    return false;
}

\toString() {
    let buf="",py=0;
    for (let x,y,p of mat) {
        if (y!=py) buf+="\n";
        py=y;
       // if (!p.map) throw new Error(`Not ary ${x},${y}`);
        let pp=(p==0 ? "-": p);
        if (pp==null) throw new Error("Why undef? p.length="+p.length);
        buf+=pp+" ";
    }
    //buf+="\nHaving: "+having;
    buf+="\n"+"Player "+player;
    return buf;
}
